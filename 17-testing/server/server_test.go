package main

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"
)

func TestDoubleHandler(t *testing.T) {
	tt := []struct {
		name   string
		value  string
		double int
		err    string
	}{
		{
			name:   "missing value",
			value:  "",
			double: 0,

			err: "missing value",
		},
		{
			name:   "not a number",
			value:  "abc",
			double: 0,
			err:    "not a number: " + "abc",
		},
		{
			name:   "double of 10",
			value:  "10",
			double: 20,
			err:    "",
		},
	}

	for _, tc := range tt {

		t.Run(tc.name, func(t *testing.T) {

			r, err := http.NewRequest(http.MethodGet, "localhost:8080/double?v="+tc.value, nil)
			if err != nil {
				t.Fatalf("could not create the request %v", err) // if we don't have the request then we can't continue
			}

			// ResponseRecorder is an implementation of http.ResponseWriter but for test
			rec := httptest.NewRecorder() // it gives the w (Response Writer)
			doubleHandler(rec, r)

			res := rec.Result() // Result returns the response generated by the handler.

			b, err := io.ReadAll(res.Body)
			if err != nil {
				t.Fatalf("could not create the response %v", err)
			}

			//case when things went wrong
			if tc.err != "" {
				if res.StatusCode != http.StatusBadRequest {
					t.Errorf("expected status as bad req; got %v", res.StatusCode)
				}

				msg := string(bytes.TrimSpace(b))

				if tc.err != msg {
					t.Errorf("expected msg %q; got %q", tc.err, msg)
				}

				if tc.double != 0 {
					t.Errorf("expected double to be 0")
				}
				return
			}
			if res.StatusCode != http.StatusOK {
				t.Errorf("expected "+http.StatusText(http.StatusOK)+"; got %v", res.StatusCode)
			}

			num := string(bytes.TrimSpace(b))

			d, err := strconv.Atoi(num)
			if err != nil {
				t.Errorf("expected an int; got %s", b)
			}
			if d != tc.double {
				t.Errorf("expected double to be %v; got %v", tc.double, d)
			}

		})
	}
}

// go test -run SumInt/one -v // it is a pattern matching // all tests which have the prefix will run
